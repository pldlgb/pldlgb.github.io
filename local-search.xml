<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/03/26/git/"/>
    <url>/2021/03/26/git/</url>
    
    <content type="html"><![CDATA[<h2 id="Git-简介"><a href="#Git-简介" class="headerlink" title="Git 简介"></a>Git 简介</h2><p>​        Git是linus团队花两周时间用C语言写的一个版本控制系统，牛啊！与CVS和SVN等集中式的版本管理系统不同，Git是分布式的版本控制系统。集中式的往往需要联网才能工作，因为版本库集中存放于中央服务器，要先从中央服务器取得最新的代码版本才能开始干活，干完再推到中央服务器。对于这两种版本管理系统还有很多的不同。简单的说就是，集中式不行！分布式行！Git行！</p><p>​        至于Git的安装，根据自身的系统Google一下，不再赘述。。。。。。</p><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>​        仓库简单来说就是一个加入了Git的目录，Git相当于是仓库管理员，对目录下的文件进行管理，追踪目录下每个文件的增、删、改操作，甚至还具有还原的功能。创建仓库需要下面两步：</p><p>1.首先，选择一个合适的地方，创建一个空目录（目录尽量不含中文）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ mkdir Gitlearn<br>$ <span class="hljs-built_in">cd</span> Gitlearn<br></code></pre></td></tr></table></figure><p>你可以通过pwd命令显示当前的目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">pwd</span>  <span class="hljs-comment">#windows系统好像不能用pwd</span><br></code></pre></td></tr></table></figure><p>2.通过<strong>git init</strong>命令添加Git管理员让它从目录变成仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git init<br>Initialized empty Git repository <span class="hljs-keyword">in</span> E:/blog/Gitlearn/.git/<br></code></pre></td></tr></table></figure><p>所以空目录并不是必要条件，只要添加Git管理员就能让它成为一个仓库。</p><h2 id="添加文件到仓库"><a href="#添加文件到仓库" class="headerlink" title="添加文件到仓库"></a>添加文件到仓库</h2><p>​        我们首先创建一个readme.txt文件，内容如下：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Git is <span class="hljs-keyword">a</span> <span class="hljs-built_in">version</span> control <span class="hljs-keyword">system</span><br></code></pre></td></tr></table></figure><p>​        将文件添加到仓库也只需两步：</p><p>1.用命令<strong>git add</strong>告诉Git，把文件添加到仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git add readme.md<br></code></pre></td></tr></table></figure><p>2.用命令<strong>git commit</strong>告诉Git，把文件提交到仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git commit -m <span class="hljs-string">&quot;Readme&quot;</span><br></code></pre></td></tr></table></figure><p><strong>commit</strong>即提交的意思，**-m**指令是对这次提交的解释</p><h2 id="时光机穿梭"><a href="#时光机穿梭" class="headerlink" title="时光机穿梭"></a>时光机穿梭</h2><h3 id="1-版本回退"><a href="#1-版本回退" class="headerlink" title="1.版本回退"></a>1.版本回退</h3><p><strong>git log</strong>命令查看版本控制历史记录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">log</span><br>commit 2fd531c1d58b72bf11efc45f2703603ac410b929 (HEAD -&gt; master)<br>$ git <span class="hljs-built_in">log</span> --pretty=oneline <span class="hljs-comment"># 单行输出</span><br>2fd531c1d58b72bf11efc45f2703603ac410b929 (HEAD -&gt; master) readme<br>cceb244ed9bb6a96af9bffc9b213a448b98c7163 readme1<br>54a9080ac991d8d3dda2e801f23ded7908eb155d readme<br></code></pre></td></tr></table></figure><p>2fd531c1d58b72bf11efc45f2703603ac410b929指的是<strong>commit id</strong>号</p><p><strong>git reset</strong>返回上个版本 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git reset --hard HEAD^  <span class="hljs-comment"># 暂时不管--hard   # HEAD~100 返回100版本前</span><br></code></pre></td></tr></table></figure><p><strong>git reset</strong>返回<strong>commit id</strong>版本 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git reset --hard 2fd531c1<br></code></pre></td></tr></table></figure><p><strong>git reflog</strong>记录每一次命令，以便查询commit id。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git reflog<br></code></pre></td></tr></table></figure><h3 id="2-工作区和暂存区"><a href="#2-工作区和暂存区" class="headerlink" title="2.工作区和暂存区"></a>2.工作区和暂存区</h3><p>我们介绍一下以下几个概念：</p><ul><li>工作区：即电脑本地下的目录，比如Gitlearn就是一个工作区；</li><li>暂存区：当我们使用<strong>git add</strong>的时候，即把文件修改从工作区添加到暂存区；</li><li>当前分支：默认为master，当我们使用git commit的时候，即把暂存区的所有内容提交到当前分支。</li></ul><p><strong>git status</strong>查看git状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git status<br></code></pre></td></tr></table></figure><h3 id="3-管理修改"><a href="#3-管理修改" class="headerlink" title="3.管理修改"></a>3.管理修改</h3><p>Git跟踪并管理的是修改，而非文件。即Git只对暂存区提交的内容进行记录，而对工作区的内容更改并不感冒。换句话说，正如工作区-暂存区-分支的原理所示，Git只对<strong>git add</strong>的内容且<strong>git commit</strong>进行记录。</p><p><strong>git diff HEAD – readme.txt</strong>命令可以查看工作区和仓库中最新版本的区别：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git diff HEAD -- readme.txt<br></code></pre></td></tr></table></figure><h3 id="4-撤销修改"><a href="#4-撤销修改" class="headerlink" title="4.撤销修改"></a>4.撤销修改</h3><ol><li>撤销工作区的修改：</li></ol><p><strong>git checkout – filename</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git checkout -- readme.txt  <span class="hljs-comment"># -- 很重要</span><br></code></pre></td></tr></table></figure><ol start="2"><li>撤销暂存区的修改（2步）：</li></ol><p>(1)<strong>git reset HEAD filename</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git reset HEAD readme.txt<br></code></pre></td></tr></table></figure><p>(2)<strong>git checkout – filename</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git checkout -- readme.txt<br></code></pre></td></tr></table></figure><ol start="3"><li>撤销仓库（分支）的修改（且未推送到远程库，比如github）：</li></ol><p>参考 <strong>1.版本回退</strong></p><h3 id="5-删除文件"><a href="#5-删除文件" class="headerlink" title="5.删除文件"></a>5.删除文件</h3><p><strong>git rm filename</strong>命令彻底从仓库删除：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git rm test.txt<br>$ git commit -m <span class="hljs-string">&quot;rm test.txt&quot;</span>  <span class="hljs-comment"># 提交 文件从仓库被删除</span><br></code></pre></td></tr></table></figure><p><strong>git checkout – filename</strong> 误删恢复：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git checkout -- test.txt  <span class="hljs-comment"># git checkout 其实就是仓库（版本库）里的版本替换工作区里的版本，无论工作区的修改还是删除都可以一键还原</span><br></code></pre></td></tr></table></figure><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><h3 id="1-添加远程库"><a href="#1-添加远程库" class="headerlink" title="1.添加远程库"></a>1.添加远程库</h3><p>现在的情形的你在本地已经有了一个仓库，那么怎么将本地的仓库同步到远程的Github仓库呢？</p><p>第一步，<strong>“创建远程仓库”</strong>，在GitHub创建一个与本地同名（Gitlearn）的仓库，（其实不确定是不是一定要同名）；</p><p>第二步，**”关联远程仓库”**，在本地的仓库下运行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git remote add origin git@github.com:water/Gitlearn.git<br></code></pre></td></tr></table></figure><p><strong>water</strong>替换为自己的github账号名，否则虽然可以关联，但是不可以推送，因为SSH KEY公钥不在我的账户列表中。</p><p>关联后，远程库的名字就是<strong>origin</strong>，也即是GitHub的默认名字，你也可以修改为其他，但是<strong>origin</strong>已经让人习惯了，别人一看这个名字就知道是远程库了。</p><p>第三步，<strong>“把本地库内容推送到远程”</strong>，用<strong>git push</strong>指令，实际上是把当前分支master推送到远程。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git push -u origin master<br></code></pre></td></tr></table></figure><p>由于远程库是空的，第一次推送<strong>master</strong>分支时，加上了**-u<strong>参数，Git不仅会把本地的</strong>master<strong>分支内容推送到远程新的</strong>master<strong>分支，还会把本地的</strong>master<strong>分支和远程的</strong>master<strong>分支关联起来，在以后的</strong>push<strong>或者</strong>pull**的时候就可以简化命令。</p><p>从现在开始，只要本地做了提交，就可以通过命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git push origin master<br></code></pre></td></tr></table></figure><p>把本地的<strong>master</strong>分支的最新内容修改推送到<strong>GitHub</strong>。</p><ul><li><p>查看远程库信息<strong>git remote -v</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ git remote -v<br></code></pre></td></tr></table></figure></li><li><p>删除远程关联<strong>git remote rm origin</strong>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ git remote rm origin   <span class="hljs-comment"># origin为名字</span><br></code></pre></td></tr></table></figure><p>此时远程库依然存在，不过是链接绑定断了。</p></li></ul><h3 id="2-从远程库克隆"><a href="#2-从远程库克隆" class="headerlink" title="2.从远程库克隆"></a>2.从远程库克隆</h3><p>假设我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆。</p><p>假如你已经新建了一个远程库，下一步是用命令<strong>git clone</strong>克隆一个本地库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ git <span class="hljs-built_in">clone</span> git@github.com:water/Gitlearn2.git<br></code></pre></td></tr></table></figure><p>Git支持多种协议，包括https，但ssh协议速度最快。</p><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h3 id="1-创建和合并分支"><a href="#1-创建和合并分支" class="headerlink" title="1.创建和合并分支"></a>1.创建和合并分支</h3><p>首先，创建<strong>dev</strong>分支，然后切换到<strong>dev</strong>分支：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ git checkout -b dev<br></code></pre></td></tr></table></figure><p>git checkout 命令加-b参数表示创建并切换，相当于以下两条命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ git branch dev<br>$ git checkout dev<br></code></pre></td></tr></table></figure><p>然后用<strong>git branch</strong>命令查看当前分支：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ git branch<br></code></pre></td></tr></table></figure><p>当前分支前面会有一个*****号，即下来的所有提交都会在此分支上完成。</p><p>如果要切换为<strong>master</strong>,则：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ git checkout master<br></code></pre></td></tr></table></figure><p>将<strong>dev</strong>分支上的修改合并到<strong>master</strong>分支上：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ git merge dev<br></code></pre></td></tr></table></figure><p>合并完成后，删除<strong>dev</strong>分支：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ git branch -d dev<br></code></pre></td></tr></table></figure><h4 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h4><p>因为切换分支git checkout <branch>和git checkout – <file>是同一个命令，但是确两种作用，所以新版本的Git也提供了新的<strong>git switch</strong>命令来切换分支：</file></branch></p><p>创建并切换到新的dev分支，可以使用：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ git switch -c dev<br></code></pre></td></tr></table></figure><p>直接切换到已有的<strong>master</strong>分支，可以使用：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ git switch master<br></code></pre></td></tr></table></figure><h3 id="2-解决冲突"><a href="#2-解决冲突" class="headerlink" title="2.解决冲突"></a>2.解决冲突</h3><p>当Git无法自动合并分支的时候，就必须首先解决冲突。解决冲突就是把Git合并失败的文件手动编辑成我们希望的内容，再提交。</p><p>用<strong>git log –gragh</strong>可以看到分支合并图：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ git <span class="hljs-built_in">log</span> --gragh --pretty=oneline --abbrev-commit<br></code></pre></td></tr></table></figure><h3 id="3-分支管理策略"><a href="#3-分支管理策略" class="headerlink" title="3.分支管理策略"></a>3.分支管理策略</h3><p>通常合并分支的时候，Git会开启<strong>FF</strong>(Fast Forward)模式，在这种模式下，删除分支后，会丢掉分支信息。</p><p>如果禁用<strong>FF</strong>模式，Git就会在merge的时候生成一个新的commit，这样，从分支历史上就可以看到分支信息。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ git switch -c dev<br>$ git add readme.txt<br>$ git commit -m <span class="hljs-string">&quot;add merge&quot;</span><br>$ git switch master<br>$ git merge --no-ff -m <span class="hljs-string">&quot;no ff merge&quot;</span> dev<br></code></pre></td></tr></table></figure><h3 id="4-Bug分支"><a href="#4-Bug分支" class="headerlink" title="4.Bug分支"></a>4.Bug分支</h3><p>我们会通过创建新的bug分支进行修复，然后合并，最后删除；</p><p>当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再<code>git stash pop</code>，回到工作现场</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ git stash<br></code></pre></td></tr></table></figure><p><code>git stash list</code>命令查看工作现场</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ git stash list<br></code></pre></td></tr></table></figure><p><code>git stash apply </code>恢复现场，<code>git stash drop</code>删除；<code>git stash pop</code>恢复的同时删除stash的内容：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ git stash apply<br>$ git stash drop<br>$ git stash pop<br></code></pre></td></tr></table></figure><p><code>git cherry-pick &lt;commit&gt;</code>命令，把bug提交的修改“复制”到当前分支，避免重复劳动。</p><h3 id="5-Feature分支"><a href="#5-Feature分支" class="headerlink" title="5.Feature分支"></a>5.Feature分支</h3><p>开发一个新的feature，最好新建一个分支；</p><p>如果要丢弃一个没有被合并过的分支，可以通过：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ git branch -D &lt;name&gt;<br></code></pre></td></tr></table></figure><p>强行删除</p><h3 id="6-多人协助"><a href="#6-多人协助" class="headerlink" title="6.多人协助"></a>6.多人协助</h3><p>多人协作的工作模式通常是这样：</p><ol><li>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</li></ol><p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。</p><p>这就是多人协作的工作模式，一旦熟悉了，就非常简单</p><p><strong>tips：</strong></p><ul><li>查看远程库信息，使用<code>git remote -v</code>；</li><li>本地新建的分支如果不推送到远程，对其他人就是不可见的；</li><li>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</li><li>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</li><li>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</li><li>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</li></ul><h3 id="7-Rebase"><a href="#7-Rebase" class="headerlink" title="7.Rebase"></a>7.Rebase</h3><ul><li>rebase操作可以把本地未push的分叉提交历史整理成直线；</li><li>rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ git rebase<br></code></pre></td></tr></table></figure><h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><p>tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。</p><h3 id="1-创建标签"><a href="#1-创建标签" class="headerlink" title="1.创建标签"></a>1.创建标签</h3><p>首先，切换到需要打标签的分支上：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ git checkout master<br></code></pre></td></tr></table></figure><p>命令<code>git tag &lt;name&gt;</code>打标签：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ git tag v0.1<br>$ git tag commit_id &lt;name&gt;<br></code></pre></td></tr></table></figure><p><code>git tag</code>查看标签，<code>git show &lt;tagname&gt;</code>查看标签信息：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ git tag<br>$ git show v0.1<br></code></pre></td></tr></table></figure><p>还可以创建带有说明的标签，用<code>-a</code>指定标签名，<code>-m</code>指定说明文字：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ git tag -a v0.1 -m <span class="hljs-string">&quot;version 0.1 released&quot;</span> commit_id<br></code></pre></td></tr></table></figure><h3 id="2-操作标签"><a href="#2-操作标签" class="headerlink" title="2.操作标签"></a>2.操作标签</h3><ul><li>命令<code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签；</li><li>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；</li><li>命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；</li><li>命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ git push origin v0.1<br>$ git push origin --tags<br>$ git tag -d v0.1<br>$ git push origin :refs/tags/v0.1<br></code></pre></td></tr></table></figure><h2 id="使用Github"><a href="#使用Github" class="headerlink" title="使用Github"></a>使用Github</h2><ul><li>在GitHub上，可以任意Fork开源仓库；</li><li>自己拥有Fork后的仓库的读写权限；</li><li>可以推送pull request给官方仓库来贡献代码。</li></ul><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰的Git教程</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>gitcommand;github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>神之时间管理术</title>
    <link href="/2021/01/19/%E7%A5%9E%E4%B9%8B%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%E6%9C%AF/"/>
    <url>/2021/01/19/%E7%A5%9E%E4%B9%8B%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<h3 id="吐槽时间"><a href="#吐槽时间" class="headerlink" title="吐槽时间"></a>吐槽时间</h3><p>​    《为什么精英都是时间控》这本书是日本作家，神经科医生——桦泽紫苑所著，不知道是翻译的问题还是作者原先就是起一个这样的书名，我觉得这个书名一看就让人生丧失了80%继续看的欲望，像带着很强的功利色彩，“对不起，我只想当咸鱼，不想当精英”，而且这样的书名让我感觉这本书是在给“上进愚人”洗脑的感觉，可能进去就是怎样珍惜时间，怎样给每一天的生活做事无巨细的规划等等之类的东西。我要是平时在图书馆看到这样的书，我可能会呵呵两声，然后心里默念“**”。至于我为什么会接触到这本书呢，是因为在一篇学姐分享”早起经验“的推文中，她分享了这本书，正好我有着不服输的精神，我打算一探究竟，是不是真的那么神奇，能让我“懒狗”起床。</p><p>​    我心里虽然最想看的部分是关于“早起”的部分，但是还是按照平时阅读的惯例，从头开始阅读。作者在文中提出了他的”神之时间管理术“，我阅读全文过后，总结为”学的时候好好学，玩的时候好好玩，别玩那些有的没的“。</p><p>​    但是一切的基础都建立在你是否有想改变现状的想法以及改变现状的决心。</p><h3 id="学的时候好好学"><a href="#学的时候好好学" class="headerlink" title="学的时候好好学"></a>学的时候好好学</h3><p>​    ”我也知道学的时候好好学啊，可是我就是没有办法把自己的心沉下来专心地完成一件事情“，我相信很多人都觉得学习工作中，都会遇到这样的问题——没法好好学！我专注不下来！（这里插一句，我觉得人与人的智商可能有差距，但是我觉得在我目前的学习生活经历中，需要真的比拼智商的地方其实很少，更多的是无法专注在事情的本身，导致效率远差一大截）</p><p>​    围绕着如何提高”专注力“，作者给出了一系列的解决方案。</p><ol><li><p>用科学的时间分割来提高你的专注力</p><p>​    人脑的结构决定了我们没办法维持长时间的专注，我们往往在一件事开始和结束的时候注意力达到顶峰，比如考试的前10分钟和后10分钟，比如NBA比赛的前五分钟和最后5分钟…那么我们就可以利用这个特性，将工作的时间切割，15分钟一个小休息，45分钟一个中休息，90分钟一个大休息，这个数据是按照人体的时钟理论得到的，可是可能人与人的体质不能一概而论，但是可能也相差不多。作者还强调了，不要在感觉疲倦的时候休息，而是在它之前，因为一旦感觉到疲惫，恢复专注力的效果将大打折扣。</p></li><li><p>用好大脑的黄金时光</p><p>​    一日之际在于晨，我小学就会背了，但是我一直都不以为然，每天睡到日上杆头，不也一样精神抖擞，效率拉满？但是确实，每天刚睡饱醒来的前一两个小时确实是精力充沛，确实是效率很高的一段时间，但是我常常醒了，但是躲在被窝里起不来，在被窝里玩上一两个小时手机，等起来的时候一天的时间也过去一半了，吃完饭，下午再跟三五好友打个球运动一下，能够学习的时间简直没有多少，然后每天到临睡的时候，想到今天什么都没干，又是深深的愧疚感，但是第二天还是一样日上杆头，周而复始。我相信很多人跟我一样，但是却始终没法做出改变，也不知道如何改变。</p><p>​    想要早起，又要保证充足的睡眠时间，就必定要从早睡开始。（我曾经也是一个坚定的夜晚工作者，但是我被他说服了，想被说服的可以自行看书）。早睡就代表早起成功了一半。至于睡醒了为什么有人感觉还是昏昏沉沉，那是因为在经过一晚上的睡眠，副交感神经在你的身体仍然占据主导地位，简单来说就是你身体已经准备好了，但是身体的开关还未开启。在书里，作者说明了一些唤醒身体的元素：“晒日光浴”，“有节奏的运动”，“咀嚼”，对应的具体的方法即“开着窗帘睡觉”，“早起散步或者淋浴”，“慢慢吃早餐”，还有一个是醒了睁着眼睛几分钟不要醒了眼睛又马上合上。</p><p>​    我实践过后，发现用书里的方法，想从温暖舒适的被窝里爬出来还是实在太难了，但是有一种情况，就是如果在早上具体的时间点你有安排的话（后有约定），你一定不会起不来。比如我与朋友假期约了早上8点钟看球的话（如果你不是🕊🕊🕊的话），像我甚至会比这个时间点更早起床，第一因为我是一个信守承诺的人，我不想8点的时候让别人等我，或者草草起床然后整个人状态也不是很好，那样给别人的印象也不好；其次是如果今天我可能有一些需要尽快解决的事情，如果我想看球的时候心无杂念的话，我就必须比约定的时间更早起把这些任务完成，这就迫使我不得不更早地开启新的一天。想想你是不是也有相似的经历，还是你就是一个喜欢拖延，觉得让人家等也无所谓的人，或者干脆起不来就取消了？这样的话如果你的朋友早早准备的话，你在他心中的信任度是会下降的哦。我们再想象一个更极端的情形，比如你明早要赶飞机，赶火车，应该大部分人都有这样的经历吧，我想你是不是甚至都睡不太着，常常闹钟还没响你都已经醒来好几次了，这是因为你的潜意识一直在默默提醒你：可不能睡过头！当然这种情况甚至都影响你的睡眠质量，因为它实在是有点重要。</p><p>​    所以最好的起床方法，我觉得是给自己制定一个“必须执行的事件”，当然不是放个定时炸弹，6点没起，6点01分就会爆炸的那种。如果你想要早起，你就在指定的时间给自己制定一件很想做的事，或者一件比较急迫的事。比如我明天一定要去吃老陈家的鸡蛋汉堡，因为晚了他就卖完了，比如明天早上一定要把那篇论文看完，又比如，你觉得呢？你觉得什么事能让你想起床呢？</p><p>​    好了，假如你已经起来了，第一件事是干什么？没错，先看一下手机有没有消息，啊朋友圈是不是更新了啊，啊不然也看一眼微博吧，看看今天有什么瓜呢？好了本来就是想看一眼有没有紧急的消息（其实根本没有），结果不知不觉就在手机上度过了半个小时或者更久。到现在我也没办法改掉这个习惯，在这个信息传播秒速抵达的时代，一系列嘈杂的信息很快悄无声息地散播在你的大脑，即使你在意识里觉得没有影响，但是它实实在在输入了，可能间接影响了你的潜意识。这样你经过一夜清空的大脑很快混入了杂质，或多或少影响了你专注的程度。</p><p>​    </p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>读后感</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何将B站的视频下载下来并转成音频？ 一种一劳永逸的解决方案</title>
    <link href="/2021/01/09/VideoDownload/"/>
    <url>/2021/01/09/VideoDownload/</url>
    
    <content type="html"><![CDATA[<h2 id><a href="#" class="headerlink" title></a></h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>​        对于一个合格的程序员来说，遇到一个问题，首先ctrl-c”问题”，然后打开谷歌，ctrl-v“问题”，然后回车。是的，回首这大学四年的学习，除了基本的理论知识，我觉得对我来说，提高最多的是我的搜索能力，我打算改天写一篇博客来详细地讲一下遇到问题我是如何搜索，在哪搜索，怎样搜索的（比如如何提取关键词）。但是今天先讲一下这个，如何将B站的视频下载下来并转成音频？——我是这样做的。</p><hr><h3 id="1-环境的配置"><a href="#1-环境的配置" class="headerlink" title="1.环境的配置"></a>1.环境的配置</h3><p>​        以下操作基于Windows10系统，不过其他系统应该也适用😁</p><p>​        人生苦短，我用python</p><p>​        所以我们先安装python！这里的版本是<strong>3.9.1</strong></p><p>​        打开官网主页下载安装包   <a href="https://www.python.org/downloads/">https://www.python.org/downloads/</a></p><p><img src="/2021/01/09/VideoDownload/python.png"></p><p>​        但是可能下载速度有点慢，你也可以直接下载百度网盘里的<a href="https://pan.baidu.com/s/1h7TpQ_X-aCcCwjwTj0lt_w">https://pan.baidu.com/s/1h7TpQ_X-aCcCwjwTj0lt_w</a> 提取码 2306</p><p>​        下载后双击打开，可以看到安装界面，<strong>勾选“Add Python 3.9 to path”</strong>（不然就得配置环境变量，还是相对比较烦的），然后选择<strong>Customer Installation</strong>。</p><p><img src="/2021/01/09/VideoDownload/install1.png"></p><p>​        然后点击<strong>Next</strong>,直到选择安装路径的地方，将python安装在你储存空间比较大的地方，我将它安装在我电脑的E:python/pythoninstall上。</p><p>再点击<strong>Install</strong>就算安装完成了。</p><p><img src="/2021/01/09/VideoDownload/install2.png"></p><p>​        安装成功之后把界面叉掉，按ctrl+R，在弹出的方框里输入<strong>cmd</strong>，弹出命令行窗口。输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python -V<br></code></pre></td></tr></table></figure><p>​        出现<strong>Python 3.9.1</strong> 说明安装成功。</p><p>​        不要关闭命令行窗口，接下来安装<strong>you-get</strong></p><p>​        再在命令行中依次输入（输入一行按回车一次）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install you-get<br>pip install --upgrade you-get<br>python -m pip install --upgrade pip<br></code></pre></td></tr></table></figure><p>​        如果你想查看一下，you-get是否安装成功，只需要在命令行中再输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install you-get <br></code></pre></td></tr></table></figure><p><img src="/2021/01/09/VideoDownload/youget.png"></p><p>​        </p><p>​        出现这样的字样说明已经是成成的了！！！可以关掉这个命令窗口了</p><hr><h3 id="2-下载视频"><a href="#2-下载视频" class="headerlink" title="2.下载视频"></a>2.下载视频</h3><p>​        比如我们想下载这只<strong>sup cypher</strong>的MV，只需要复制它的链接。</p><p><img src="/2021/01/09/VideoDownload/bili.png"></p><p>​            然后<strong>打开本地文件夹cmd</strong>，到你打算存放视频的目录下，在地址栏<strong>输入cmd，然后回车</strong>。</p><p><img src="/2021/01/09/VideoDownload/cmd.png"></p><p>​        在出现的命令行界面，输入you-get -i 视频链接，比如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">you-get -i https://www.bilibili.com/video/BV1qx411Y7Ue?from=search&amp;seid=1960173568551417284<br></code></pre></td></tr></table></figure><p><img src="/2021/01/09/VideoDownload/down.png"></p><p>​        你可以按照它的指示，选择你下载视频的格式和清晰度，比如这里我们选择下载一个“高清 720P”，“MP4”版本的视频，即输入对应红色框框的代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">you-get --format=dash-flv720 https://www.bilibili.com/video/BV1qx411Y7Ue?from=search&amp;seid=1960173568551417284<br></code></pre></td></tr></table></figure><p>​        可以看到视频被<strong>飞速下载</strong>！进度条迅速拉满！</p><p><img src="/2021/01/09/VideoDownload/WDGAG.png"></p><p>​        然后在本地目录我们就可以看到视频已经出现了。</p><p>​        基本上国内外的视频都可以用you-get下载，下次有需要下载的时候直接打开本地目录的cmd，输入<strong>you-get -i 视频链接</strong> ，再选择下载的选项就可以了。</p><p>如果你知道你想下载的视频的格式，也可以直接输入<strong>you-get –format=dash-flv720 视频链接</strong>，（将 dash-flv720 替换成你想要的）就可以直接下载了。</p><p>​        </p><hr><h3 id="3-将视频转换为音频"><a href="#3-将视频转换为音频" class="headerlink" title="3. 将视频转换为音频"></a>3. 将视频转换为音频</h3><p>​    这里推荐一些视频转音频的网站</p><pre><code>1. [Convertio - 文件转换器](https://convertio.co/),直接在线上传视频就可以转。 2. [convert anything to anything - CloudConvert](https://cloudconvert.com/)，同样不用下载即可在线转音频</code></pre><hr><h3 id="附加说明"><a href="#附加说明" class="headerlink" title="附加说明"></a>附加说明</h3><p>​    you-get如果下载的文件过大（一般出现在1080p及以上的解析度），就会把音频和视频分成[00]和[01】两个文件，默认是会在下载完成后合成的。这个过程是基于FFmpeg的。我们的电脑可能需要安装这个插件。如果有强迫症的可以参照这个安装，或者我后续会添加教程到这里。</p><p><a href="https://www.cnblogs.com/xiezhidong/p/6924775.html">https://www.cnblogs.com/xiezhidong/p/6924775.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Transformer</title>
    <link href="/2021/01/07/Transformer/"/>
    <url>/2021/01/07/Transformer/</url>
    
    <content type="html"><![CDATA[<h2 id="Transformer阅读"><a href="#Transformer阅读" class="headerlink" title="Transformer阅读"></a>Transformer阅读</h2>]]></content>
    
    
    
    <tags>
      
      <tag>nlp;transformer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Create your own blog</title>
    <link href="/2021/01/03/hexo-blog-init/"/>
    <url>/2021/01/03/hexo-blog-init/</url>
    
    <content type="html"><![CDATA[<h2 id="Hexo-Blog-in-windows10"><a href="#Hexo-Blog-in-windows10" class="headerlink" title="Hexo Blog in windows10"></a>Hexo Blog in windows10</h2><p>​    本文主要介绍利用hexo工具，将个人博客部署到github上，过程大体分为7步：</p><h3 id="1-相关软件的安装"><a href="#1-相关软件的安装" class="headerlink" title="1.相关软件的安装"></a>1.相关软件的安装</h3><p>​        使用hexo，需要用到两个软件，一是git，二是node，软件可以从官网上下载，也可以下载百度云安装包 <a href="https://pan.baidu.com/s/1uW4gEzVN546sYsQ8WAsB5w">https://pan.baidu.com/s/1uW4gEzVN546sYsQ8WAsB5w</a>  提取码：2333 。</p><p>​        下载之后进行安装，基本上除了安装路径以及git上如图的这个选项勾选为<strong>Use windows’ default console window</strong>，其他的配置都是默认即可。</p><p><img src="/2021/01/03/hexo-blog-init/git.png"></p><h3 id="2-部署hexo环境"><a href="#2-部署hexo环境" class="headerlink" title="2.部署hexo环境"></a>2.部署hexo环境</h3><p>​            首先创建一个目录，这里取名为blog，在我的E盘blog文件夹下，所以它的路径是E:/blog/blog</p><p>​            win+R打开cmd命令终端，定位到blog文件夹下，依次输入下列指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install hexo-cli -g<br>$ hexo init <span class="hljs-string">&quot;blog-name&quot;</span>    //<span class="hljs-string">&quot;blog-name&quot;</span> 替换为你blog的名字，比如hexo init water<br>$ <span class="hljs-built_in">cd</span> <span class="hljs-string">&quot;blog-name&quot;</span>      //进入到你blog的目录<br>$ npm intsall<br>$ hexo server   //也可以简写为 hexo s  这样打开它弹出来的链接就可以在本地访问博客网页了<br></code></pre></td></tr></table></figure><p>​            可能有的时候会下载不成功，可能因为网站是国外的。。。</p><h3 id="3-创建github仓库"><a href="#3-创建github仓库" class="headerlink" title="3.创建github仓库"></a>3.创建github仓库</h3><p>​            假设你已经有了一个github账号，新建一个Repository，将该仓库的名字命名为 “github用户名.github.io”,例如你的github用户名为water，那就是water.github.io ,命名后点击Add a README file 然后点击绿色按钮创建仓库。</p><p>​            在这个仓库下创建一个index.html文件，内容“Hello，world” 。</p><p><img src="/2021/01/03/hexo-blog-init/index.png"></p><p>​            回到windows终端，输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install hexo-deployer-git --save  <br></code></pre></td></tr></table></figure><h3 id="4-获取网址公钥"><a href="#4-获取网址公钥" class="headerlink" title="4.获取网址公钥"></a>4.获取网址公钥</h3><p>​        在git的安装目录下打开git-bash.exe</p><p> <img src="/2021/01/03/hexo-blog-init/gitbash.png"></p><p>​        依次输入下列指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git config --user.name <span class="hljs-string">&quot;water&quot;</span>  //将water替换为你自己的github名字<br>$ git config --user.email <span class="hljs-string">&quot;water@qq.com&quot;</span>  //将邮箱替换为你在github上验证的邮箱<br>$ ssh-keygen -t rsa -C <span class="hljs-string">&quot;water@qq.com&quot;</span>    //获取公钥，同理替换邮箱<br></code></pre></td></tr></table></figure><p>​        然后选择公钥存放的位置，输入密码（好像是任意密码就可以，不像有的博主说是github密码），然后找到存放rsa的文件路径，用记事本打开id_rsa.pub文件，复制里面的内容。</p><p>​        打开你的github网页，在Settings/SSH and GPG keys 选择添加ssh key</p><p><img src="/2021/01/03/hexo-blog-init/key.png"></p><p>​        将复制的内容粘贴到key方框格中，点击Add SSH key</p><h3 id="5-修改-config-yml文件"><a href="#5-修改-config-yml文件" class="headerlink" title="5.修改 _config.yml文件"></a>5.修改 _config.yml文件</h3><p>​        在你的本地博客的目录下，使用编辑软件打开_config.yml文件，在文件的最下方添加repository和branch，以及修改type为git</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-comment">## repository 即你的github仓库地址加.git</span><br><span class="hljs-attr">deploy:</span><br> <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br> <span class="hljs-attr">repository:</span> <span class="hljs-string">https://github.com/water/water.github.io.git</span>   <br> <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><p>​        在16行，将url修改为：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># URL</span><br><span class="hljs-comment">## If your site is put in a subdirectory, set url as &#x27;http://example.com/child&#x27; and root as &#x27;/child/&#x27;</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">https://water.github.io</span>    <span class="hljs-comment">## 即你的博客地址</span><br></code></pre></td></tr></table></figure><h3 id="6-快速开始"><a href="#6-快速开始" class="headerlink" title="6.快速开始"></a>6.快速开始</h3><p>​        将你的仓库的默认branch修改为master </p><p>​    <img src="/2021/01/03/hexo-blog-init/master.png" style="zoom:50%;">    </p><p>​        cmd到本地blog的文件夹下，执行下列命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo cl       // clean<br>$ hexo g        // generation<br>$ hexo d        // deployment 需要输入github账号密码<br></code></pre></td></tr></table></figure><p>​        然后再打开博客网址water.github.io就可以看到博客网页呈现了。</p><h3 id="7-快速更换主题yilia"><a href="#7-快速更换主题yilia" class="headerlink" title="7.快速更换主题yilia"></a>7.快速更换主题yilia</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> https://github.io/litten/hexo-theme-yilia.git themes/yilia<br></code></pre></td></tr></table></figure><p>​        将_config.yml的主题theme从landscape改成yilia就可以了。再：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo cl       // clean<br>$ hexo g        // generation<br>$ hexo d        // deployment 需要输入github账号密码<br></code></pre></td></tr></table></figure><p>​        </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/01/03/hello-world/"/>
    <url>/2021/01/03/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
